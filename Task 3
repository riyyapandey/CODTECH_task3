import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

# Load the Mall_Customers dataset
data = {
    'CustomerID': np.arange(1, 201),
    'Gender': np.random.choice(['Male', 'Female'], size=200),
    'Age': np.random.randint(18, 70, size=200),
    'Annual Income (k$)': np.random.randint(15, 150, size=200),
    'Spending Score (1-100)': np.random.randint(1, 100, size=200)
}
df = pd.DataFrame(data)

# Display the first few rows of the dataset
print(df.head())

# Data preprocessing
X = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine the optimal number of clusters using the elbow method
def find_optimal_clusters(data, max_k):
    inertias = []
    sil_scores = []
    for k in range(2, max_k+1):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(data)
        inertias.append(kmeans.inertia_)
        if k > 1:
            sil_scores.append(silhouette_score(data, kmeans.labels_))
    return inertias, sil_scores

max_clusters = 10  # Max number of clusters to try
inertias, sil_scores = find_optimal_clusters(X_scaled, max_clusters)

# Plotting the elbow curve and silhouette scores
plt.figure(figsize=(12, 5))

# Plotting the elbow curve
plt.subplot(1, 2, 1)
plt.plot(range(2, max_clusters+1), inertias, marker='o', linestyle='--')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Curve')

# Plotting the silhouette scores
plt.subplot(1, 2, 2)
plt.plot(range(2, max_clusters+1), sil_scores, marker='o', linestyle='--')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score')

plt.tight_layout()
plt.show()

# Based on the elbow curve and silhouette scores, select the optimal number of clusters
optimal_clusters = 5  # Adjust based on the results from the plots

# Perform K-means clustering
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
kmeans.fit(X_scaled)

# Assign cluster labels to original data
df['Cluster'] = kmeans.labels_

# Analyze segment characteristics (e.g., average Age, Annual Income, Spending Score per cluster)
segment_analysis = df.groupby('Cluster').agg({
    'Age': 'mean',
    'Annual Income (k$)': 'mean',
    'Spending Score (1-100)': 'mean',
    'CustomerID': 'count'  # Count of customers in each cluster
}).reset_index()

print(segment_analysis)
